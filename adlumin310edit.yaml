# This playbook requires the ansible_become_password to be set in your invetory file for your adlumin host.
# I have provided an example inventory with instructions on how to do this securely if required
# This is an unsupported workaround please use at your own risk.
# This is an unsupported workaround please use at your own risk.
# This is an unsupported workaround please use at your own risk.
# Written by Brian Grant
# brian.grant@n-able.com
# Important Ensure you've already put your tenantid into the adlumin_config.txt on the desktop of the system
# 
# The purpose of this playbook is to act as an refactor and update script 
# for the adlumin_forwarder.py script so that it can run properly under 
# python 3.10 which is supported until October 2026, it seemed like the
# logical choice as the version of Ubuntu the log forwarder images are 
# using by default right now is 22.04 LTS which comes with 3.10 as its
# preinstalled version of python3
#
# As for the edits to adlumin_forwarder.py to get it working with python
# 3.10 they were relatively minor. At the top of the script there is a 
# shebang that is setting the script to run as 3.6 that is being changed
# to 3.10. Further more there were issues importing the zstd module in
# 3.10 so it's line was changed from "import ztd" to "import zstandard as ztd".
# Lastly I am commenting out the updater function in the script as this was 
# causing some issues overwriting the file and making the service fail to start.
# Just for good measure I'm using chattr to make the file immutable once changed
# so that nothing on the system can change it.
#
# This of course raises the problem that the script can no longer be updated.
# I've set this playbook to first unlock the adlumin_forwarder.py script and then
# run the updater.py script to update it. From there re-edits the forwarder script
# with sed to include the above edits and relocks the file.
#
# The updater.py script is also being updated. Normally the updater script pulls it's 
#creds from the session variables set in .bashrc of the adlumin user. This does not 
# translate well to scripting or automation such as ansible so we are editing that script
# to plug in the values from the bashrc directly to the updater script rather than have 
# to pull them from the environment variables. The updater script itself is alot being
# set to use python 3.10
---
- name: Refactor and update adlumin_forwarder.py for Python 3.10
  hosts: all
  become: yes
  pre_tasks:
    - name: Set custom remote_tmp directory
      ansible.builtin.set_fact:
        ansible_remote_tmp: /home/adlumin/tmp  

    - name: Set filepath to updater.py
      set_fact:
        file_path: "/usr/local/adlumin/updater.py"

    - name: Check if the file is executable
      stat:
        path: "{{ file_path }}"
      register: file_stat

    - name: Ensure the updater.py file is executable
      file:
        path: "{{ file_path }}"
        mode: '0755'
      when: not file_stat.stat.exists or file_stat.stat.mode != '0755'

    - name: Set adlumin_forwarder.py to be mutable
      shell: chattr -i /usr/local/adlumin/adlumin_forwarder.py
      become: yes
      become_user: root

    - name: Set paths for credentials and Python script
      set_fact:
        creds_file: /home/adlumin/.bashrc
        python_script: /usr/local/adlumin/updater.py

    - name: Read the credentials file
      shell: cat {{ creds_file }}
      register: creds_content

    - name: Set environment variables from credentials file
      set_fact:
        s3_akey: "{{ creds_content.stdout_lines | select('search', 'export S3_AKEY') | map('regex_replace', 'export S3_AKEY=\"(.*)\"', '\\1') | list | first }}"
        s3_skey: "{{ creds_content.stdout_lines | select('search', 'export S3_SKEY') | map('regex_replace', 'export S3_SKEY=\"(.*)\"', '\\1') | list | first }}"

    - name: Verify environment variables are set (debug)
      debug:
        msg: "S3_AKEY = {{ s3_akey }}, S3_SKEY = {{ s3_skey }}"

    - name: Update aws_access_key_id in the Python script
      replace:
        path: "{{ python_script }}"
        regexp: "aws_access_key_id=os.environ.get\\('S3_AKEY'\\)"
        replace: "aws_access_key_id='{{ s3_akey }}'"

    - name: Update aws_secret_access_key in the Python script
      replace:
        path: "{{ python_script }}"
        regexp: "aws_secret_access_key=os.environ.get\\('S3_SKEY'\\)"
        replace: "aws_secret_access_key='{{ s3_skey }}'"

    - name: Change the script to use python 3.10 instead of 3.6
      lineinfile:
        path: /usr/local/adlumin/updater.py
        regexp: '^#!.*python3\.6'
        line: '#!/usr/bin/env python3.10'
        
    - name: Verify the changes (debug)
      shell: cat {{ python_script }}
      register: updated_script

    - debug:
        var: updated_script.stdout_lines

    - name: Run the Adlumin Script Updater
      shell: /usr/local/adlumin/updater.py
      become: yes
      register: update_output

    - name: Display Updater output
      debug:
        msg: "{{ update_output.stdout }}"
     
    - name: Ensure zstandard is installed globally and running the latest version
      shell: python3.10 -m pip install --upgrade zstandard
      become: yes
      become_user: root
      register: install_zstandard_output

    - name: Display zstandard install output
      debug:
        msg: "{{ install_zstandard_output.stdout }}"

    - name: Change the script to use python 3.10 instead of 3.6
      lineinfile:
        path: /usr/local/adlumin/adlumin_forwarder.py
        regexp: '^#!.*python3\.6'
        line: '#!/usr/bin/env python3.10'

    - name: Correct "import zstd" to "import zstandard as zstd"
      replace:
        path: /usr/local/adlumin/adlumin_forwarder.py
        regexp: '^import zstd'
        replace: 'import zstandard as zstd'

    - name: Comment out the updater start line in the script
      lineinfile:
        path: /usr/local/adlumin/adlumin_forwarder.py
        regexp: '^(\s*)updater\.start\(\)'
        line: '\1#updater.start()'
        backrefs: yes

    - name: Set adlumin_forwarder.py to be immutable
      shell: chattr +i /usr/local/adlumin/adlumin_forwarder.py
      become: yes
      become_user: root

    - name: Restart the Adlumin Service
      shell: adlumin_restart
      become: yes
    
    - name: Wait for 5 seconds
      pause:
        seconds: 5

    - name: Check Adlumin Service Status
      shell: adlumin_status
      register: service_status

    - name: Display Adlumin Service Status
      debug:
        var: service_status
