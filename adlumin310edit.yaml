# Work in Progress do not use yet.
# currently stuck on running /usr/local/adlumin/updater.py its having issues with missing stuff, when running at cli it only works if running it as the adlumin user specifically

# This playbook requires the ansible_become_password to be set in your invetory file for your adlumin host.
# I have provided an example inventory with instructions on how to do this securely if required
---
- name: Refactor and update adlumin_forwarder.py for Python 3.10
  hosts: all
  become: yes
  become_user: adlumin
  pre_tasks:
    - name: Set custom remote_tmp directory
      ansible.builtin.set_fact:
        ansible_remote_tmp: /home/adlumin/tmp  
  tasks:
    - name: Check if the script is running as root
      fail:
        msg: "This script must NOT be run as root or sudo. Please run it as the Adlumin user. The script will call sudo itself where required."
      when: ansible_user_id == 'root'

    - name: Check if the script is running as the adlumin user
      fail:
        msg: "This script must be run as the adlumin user."
      when: ansible_user_id != 'adlumin'

    - name: Set filepath to updater.py
      set_fact:
        file_path: "/usr/local/adlumin/updater.py"

    - name: Check if the file is executable
      stat:
        path: "{{ file_path }}"
      register: file_stat

    - name: Ensure the updater.py file is executable
      file:
        path: "{{ file_path }}"
        mode: '0755'
      when: not file_stat.stat.exists or file_stat.stat.mode != '0755'

    - name: Set adlumin_forwarder.py to be mutable
      shell: chattr -i /usr/local/adlumin/adlumin_forwarder.py
      become: yes
      become_user: root

    - name: Set paths for credentials and Python script
      set_fact:
        creds_file: /home/adlumin/.bashrc
        python_script: /usr/local/adlumin/updater.py

    - name: Read the credentials file
      shell: cat {{ creds_file }}
      register: creds_content

    - name: Set environment variables from credentials file
      set_fact:
        s3_akey: "{{ creds_content.stdout_lines | select('search', 'export S3_AKEY') | map('regex_replace', 'export S3_AKEY=\"(.*)\"', '\\1') | list | first }}"
        s3_skey: "{{ creds_content.stdout_lines | select('search', 'export S3_SKEY') | map('regex_replace', 'export S3_SKEY=\"(.*)\"', '\\1') | list | first }}"

    - name: Verify environment variables are set (debug)
      debug:
        msg: "S3_AKEY = {{ s3_akey }}, S3_SKEY = {{ s3_skey }}"

    - name: Update aws_access_key_id in the Python script
      replace:
        path: "{{ python_script }}"
        regexp: "aws_access_key_id=os.environ.get\\('S3_AKEY'\\)"
        replace: "aws_access_key_id='{{ s3_akey }}'"

    - name: Update aws_secret_access_key in the Python script
      replace:
        path: "{{ python_script }}"
        regexp: "aws_secret_access_key=os.environ.get\\('S3_SKEY'\\)"
        replace: "aws_secret_access_key='{{ s3_skey }}'"

    - name: Verify the changes (debug)
      shell: cat {{ python_script }}
      register: updated_script

    - debug:
        var: updated_script.stdout_lines

    - name: Run the Adlumin Script Updater
      shell: /usr/local/adlumin/updater.py
      become: yes

    - name: Stop the adlumin service
      systemd:
        name: adlumin.service
        state: stopped
        become: yes

    - name: Ensure zstandard is installed globally and running the latest version
      pip:
        name: zstandard
        executable: python3.10
        become: yes

    - name: Change the script to use python 3.10 instead of 3.6
      lineinfile:
        path: /usr/local/adlumin/adlumin_forwarder.py
        regexp: '^#!.*python3\.6'
        line: '#!/usr/bin/env python3.10'

    - name: Correct "import zstd" to "import zstandard as zstd"
      replace:
        path: /usr/local/adlumin/adlumin_forwarder.py
        regexp: '^import zstd'
        replace: 'import zstandard as zstd'

    - name: Comment out the update function of the script
      lineinfile:
        path: /usr/local/adlumin/adlumin_forwarder.py
        regexp: '^updater = threading.Thread(target=update'
        line: '#updater = threading.Thread(target=update'
        insertafter: '^#updater = threading.Thread(target=update'

    - name: Set adlumin_forwarder.py to be immutable
      shell: chattr +i /usr/local/adlumin/adlumin_forwarder.py
      become: yes
      become_user: root

    - name: Start the Adlumin Service
      systemd:
        name: adlumin.service
        state: started
        become: yes

    - name: Wait for 5 seconds
      pause:
        seconds: 5

    - name: Check Adlumin Service Status
      systemd:
        name: adlumin.service
        register: service_status

    - name: Display Adlumin Service Status
      debug:
        var: service_status
